version: "3.8"

services:
  api-node:
    container_name: api-node
    build:
      context: ../../back-end
      dockerfile: ../docker/dev/requirements/api-node/Dockerfile
    volumes:
      - ../../back-end/src:/app/src
    environment:
      DATABASE_URL: ${DATABASE_URL}
      JWT_SECRET: ${JWT_SECRET}
      FORTYTWO_APP_ID: ${FORTYTWO_APP_ID}
      FORTYTWO_APP_SECRET: ${FORTYTWO_APP_SECRET}
      FORTYTWO_CALLBACK_URL: ${FORTYTWO_CALLBACK_URL}
      FRONTEND_URL: ${FRONTEND_URL}
    expose:
      - 3000
    ports:
      - "3000:3000"
      - "5555:5555"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      my_network:
        aliases:
          - back_hostname

  web-node:
    container_name: web-node
    build:
      context: ../../front-end
      dockerfile: ../docker/dev/requirements/web-node/Dockerfile
    volumes:
      - ../../front-end/src:/app/src
    environment:
      BACKEND_URL: ${BACKEND_URL}
    ports:
      - "4000:4000"
    depends_on:
      - api-node
    networks:
      my_network:
        aliases:
          - front_hostname

  postgres:
    container_name: postgres
    image: postgres:13-bullseye
    expose:
      - 5432
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test:
        ["CMD", "sh", "-c", "pg_isready -U $$POSTGRES_USER -h $$(hostname -i)"]
      interval: 30s
      timeout: 5s
      retries: 30
    networks:
      my_network:
        aliases:
          - db_hostname
volumes:
  db-data:

networks:
  my_network:
    driver: bridge
